-- db/init/1_schema.sql
-- IMPORTANT: mysql database name is injected by docker-compose (MYSQL_DATABASE=skilllink)
USE skilllink;

-- ===== USERS =====
CREATE TABLE IF NOT EXISTS Users (
  UserId INT AUTO_INCREMENT PRIMARY KEY,
  FullName VARCHAR(255) NOT NULL,
  Email VARCHAR(255) NOT NULL UNIQUE,
  PasswordHash VARCHAR(255) NULL,
  Role VARCHAR(50) NOT NULL DEFAULT 'Learner',
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  Bio TEXT NULL,
  Location VARCHAR(255) NULL,
  ProfilePicture VARCHAR(500) NULL,
  ReadyToTeach TINYINT(1) NOT NULL DEFAULT 0,
  IsActive TINYINT(1) NOT NULL DEFAULT 1,
  EmailVerified TINYINT(1) NOT NULL DEFAULT 0,
  EmailVerificationToken VARCHAR(255) NULL,
  EmailVerificationExpires DATETIME NULL
);

-- ===== REQUESTS =====
CREATE TABLE IF NOT EXISTS Requests (
  RequestId INT AUTO_INCREMENT PRIMARY KEY,
  LearnerId INT NOT NULL,
  SkillName VARCHAR(255) NOT NULL,
  Topic VARCHAR(255) NULL,
  Description TEXT NULL,
  Status VARCHAR(50) NOT NULL DEFAULT 'OPEN',
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (LearnerId) REFERENCES Users(UserId) ON DELETE CASCADE
);

-- ===== TUTOR POSTS =====
CREATE TABLE IF NOT EXISTS TutorPosts (
  PostId INT AUTO_INCREMENT PRIMARY KEY,
  TutorId INT NOT NULL,
  Title VARCHAR(255) NOT NULL,
  Description TEXT NULL,
  MaxParticipants INT NOT NULL,
  Status VARCHAR(50) NOT NULL DEFAULT 'Open',
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  ScheduledAt DATETIME NULL,
  ImageUrl VARCHAR(500) NULL,
  FOREIGN KEY (TutorId) REFERENCES Users(UserId) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS TutorPostParticipants (
  ParticipantId INT AUTO_INCREMENT PRIMARY KEY,
  PostId INT NOT NULL,
  UserId INT NOT NULL,
  AcceptedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_post_user (PostId, UserId),
  FOREIGN KEY (PostId) REFERENCES TutorPosts(PostId) ON DELETE CASCADE,
  FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);

-- ===== FRIENDSHIPS =====
CREATE TABLE IF NOT EXISTS Friendships (
  Id INT AUTO_INCREMENT PRIMARY KEY,
  FollowerId INT NOT NULL,
  FollowedId INT NOT NULL,
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uniq_follow (FollowerId, FollowedId),
  FOREIGN KEY (FollowerId) REFERENCES Users(UserId) ON DELETE CASCADE,
  FOREIGN KEY (FollowedId) REFERENCES Users(UserId) ON DELETE CASCADE
);

-- ===== FEED REACTIONS/COMMENTS =====
CREATE TABLE IF NOT EXISTS PostReactions (
  ReactionId INT AUTO_INCREMENT PRIMARY KEY,
  PostType VARCHAR(20) NOT NULL, -- LESSON or REQUEST
  PostId INT NOT NULL,
  UserId INT NOT NULL,
  Reaction VARCHAR(10) NOT NULL, -- LIKE or DISLIKE
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_reaction (PostType, PostId, UserId),
  INDEX idx_post (PostType, PostId),
  FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PostComments (
  CommentId INT AUTO_INCREMENT PRIMARY KEY,
  PostType VARCHAR(20) NOT NULL, -- LESSON or REQUEST
  PostId INT NOT NULL,
  UserId INT NOT NULL,
  Content TEXT NOT NULL,
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_post (PostType, PostId),
  FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);

-- ===== SKILLS =====
CREATE TABLE IF NOT EXISTS Skills (
  SkillId INT AUTO_INCREMENT PRIMARY KEY,
  Name VARCHAR(255) NOT NULL UNIQUE,
  IsPredefined TINYINT(1) NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS UserSkills (
  UserSkillId INT AUTO_INCREMENT PRIMARY KEY,
  UserId INT NOT NULL,
  SkillId INT NOT NULL,
  Level VARCHAR(50) NOT NULL DEFAULT 'Beginner', -- string instead of ENUM
  UNIQUE KEY uq_user_skill (UserId, SkillId),
  FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE,
  FOREIGN KEY (SkillId) REFERENCES Skills(SkillId) ON DELETE CASCADE
);

-- ===== ACCEPTED REQUESTS =====
CREATE TABLE IF NOT EXISTS AcceptedRequests (
  AcceptedRequestId INT AUTO_INCREMENT PRIMARY KEY,
  RequestId INT NOT NULL,
  AcceptorId INT NOT NULL,
  AcceptedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  Status VARCHAR(50) NOT NULL DEFAULT 'PENDING',
  ScheduleDate DATETIME NULL,
  MeetingType VARCHAR(100) NULL,
  MeetingLink VARCHAR(500) NULL,
  UNIQUE KEY uq_request_acceptor (RequestId, AcceptorId),
  FOREIGN KEY (RequestId) REFERENCES Requests(RequestId) ON DELETE CASCADE,
  FOREIGN KEY (AcceptorId) REFERENCES Users(UserId) ON DELETE CASCADE
);

-- ===== SESSIONS =====
CREATE TABLE IF NOT EXISTS Sessions (
  SessionId INT AUTO_INCREMENT PRIMARY KEY,
  RequestId INT NOT NULL,
  TutorId INT NOT NULL,
  ScheduledAt DATETIME NULL,
  Status VARCHAR(50) NOT NULL DEFAULT 'PENDING',
  CreatedAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (RequestId) REFERENCES Requests(RequestId) ON DELETE CASCADE,
  FOREIGN KEY (TutorId) REFERENCES Users(UserId) ON DELETE CASCADE
);

-- Helpful indexes (for feed sorting, requests page)
CREATE INDEX idx_requests_created ON Requests (CreatedAt DESC);
CREATE INDEX idx_tutorposts_created ON TutorPosts (CreatedAt DESC);
