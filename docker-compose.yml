version: "3.8"

services:
  # =========================
  # 1) SQL Server (prod)
  # =========================
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: skilllink-db
    restart: unless-stopped
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Your_password123"  # must meet MSSQL policy
      MSSQL_PID: "Developer"
    ports:
      - "1434:1433"
    volumes:
      - db_data:/var/opt/mssql

  # Run schema after DB is ready (T-SQL file)
  db-init:
    image: mcr.microsoft.com/mssql-tools:latest
    container_name: skilllink-db-init
    depends_on:
      db:
        condition: service_started
    environment:
      MSSQL_SA_PASSWORD: "Your_password123"
    volumes:
      - ./db/init:/scripts:ro  # Put 1_schema.sql here
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      # detect sqlcmd path
      if [ -x /opt/mssql-tools18/bin/sqlcmd ]; then SQLCMD=/opt/mssql-tools18/bin/sqlcmd; \
      elif [ -x /opt/mssql-tools/bin/sqlcmd ]; then SQLCMD=/opt/mssql-tools/bin/sqlcmd; \
      else echo "sqlcmd not found in tools image" >&2; exit 1; fi

      echo "Waiting for SQL Server (prod) to be ready..."
      for i in $(seq 1 60); do
        $SQLCMD -S db -U sa -P "$$MSSQL_SA_PASSWORD" -C -Q "SELECT 1" && break
        echo "Still waiting..."; sleep 3
      done

      echo "Ensuring database [skilllink] exists..."
      $SQLCMD -S db -U sa -P "$$MSSQL_SA_PASSWORD" -C -Q "IF DB_ID('skilllink') IS NULL CREATE DATABASE skilllink;"

      echo "Applying schema to [skilllink]..."
      $SQLCMD -S db -U sa -P "$$MSSQL_SA_PASSWORD" -d skilllink -C -i /scripts/1_schema.sql

      echo "Schema applied for prod."

  # =========================
  # 2) API
  # =========================
  api:
    build:
      context: ./SkillLink.API
      dockerfile: Dockerfile
    container_name: skilllink-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_started
      db-init:
        condition: service_completed_successfully
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:8080"
      ASPNETCORE_HTTPS_PORT: "8443"
      CORS__Origins: "http://localhost:3000;http://127.0.0.1:3000"

      # ---- SQL Server Connection string ----
      ConnectionStrings__DefaultConnection: "Server=db;Database=skilllink;User Id=sa;Password=Your_password123;TrustServerCertificate=True;Encrypt=False;"

      # ---- JWT / App Settings ----
      Jwt__Key: "dev-secret-key-change"
      Jwt__Issuer: "skilllink"
      Jwt__Audience: "skilllink-web"
      Jwt__ExpireMinutes: "120"
      Api__BaseUrl: "http://localhost:5159"

      # ---- SMTP placeholders ----
      Smtp__Host: "smtp.example.com"
      Smtp__Port: "587"
      Smtp__User: "user"
      Smtp__Pass: "pass"
      Smtp__From: "noreply@skilllink.local"
      Smtp__UseSSL: "false"

    ports:
      - "5159:8080"
    volumes:
      - ./SkillLink.API/wwwroot:/app/wwwroot
      - dpkeys:/root/.aspnet/DataProtection-Keys

  # =========================
  # 3) SQL Server (test)
  # =========================
  db_test:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: skilllink-db-test
    restart: unless-stopped
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Your_password123"
      MSSQL_PID: "Developer"
    ports:
      - "1435:1433"
    volumes:
      - db_test_data:/var/opt/mssql

  # Run schema for test DB
  db-test-init:
    image: mcr.microsoft.com/mssql-tools:latest
    container_name: skilllink-db-test-init
    depends_on:
      db_test:
        condition: service_started
    environment:
      MSSQL_SA_PASSWORD: "Your_password123"
    volumes:
      - ./db_test/init:/scripts:ro
    entrypoint: ["/bin/sh", "-c"]
    command: |
      set -e
      if [ -x /opt/mssql-tools18/bin/sqlcmd ]; then SQLCMD=/opt/mssql-tools18/bin/sqlcmd; \
      elif [ -x /opt/mssql-tools/bin/sqlcmd ]; then SQLCMD=/opt/mssql-tools/bin/sqlcmd; \
      else echo "sqlcmd not found in tools image" >&2; exit 1; fi

      echo "Waiting for SQL Server (test) to be ready..."
      for i in $(seq 1 60); do
        $SQLCMD -S db_test -U sa -P "$$MSSQL_SA_PASSWORD" -C -Q "SELECT 1" && break
        echo "Still waiting (test DB)..."; sleep 3
      done

      echo "Ensuring database [skilllink_test] exists..."
      $SQLCMD -S db_test -U sa -P "$$MSSQL_SA_PASSWORD" -C -Q "IF DB_ID('skilllink_test') IS NULL CREATE DATABASE skilllink_test;"

      echo "Applying test schema..."
      $SQLCMD -S db_test -U sa -P "$$MSSQL_SA_PASSWORD" -d skilllink_test -C -i /scripts/1_schema.sql

      echo "Test schema applied."

volumes:
  db_data:
  db_test_data:
  dpkeys:
